/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "Wx100AudioProcessor.h"
#include "Wx100Editor.h"


//==============================================================================
Wx100AudioProcessorEditor::Wx100AudioProcessorEditor (Wx100AudioProcessor& p)
    : AudioProcessorEditor (&p), processor (p)
{
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (400, 400);
    for (int i = 0; i < numOperators; ++i)
    {
        amp[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        amp[i].setSize(50, 50);
        amp[i].setRange(0.0, 10.0, 0.001);
        amp[i].setScrollWheelEnabled(false);
        amp[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        amp[i].addListener(this);
        addAndMakeVisible(amp[i]);

        tuning[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        tuning[i].setSize(50, 50);
        tuning[i].setRange(0.0, 10.0, 0.001);
        tuning[i].setScrollWheelEnabled(false);
        tuning[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        tuning[i].addListener(this);
        addAndMakeVisible(tuning[i]);

        attack[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        attack[i].setSize(50, 50);
        attack[i].setRange(0.0, 10.0, 0.001);
        attack[i].setScrollWheelEnabled(false);
        attack[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        attack[i].addListener(this);
        addAndMakeVisible(attack[i]);

        decay[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        decay[i].setSize(50, 50);
        decay[i].setRange(0.0, 10.0, 0.001);
        decay[i].setScrollWheelEnabled(false);
        decay[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        decay[i].addListener(this);
        addAndMakeVisible(decay[i]);

        sustain[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        sustain[i].setSize(50, 50);
        sustain[i].setRange(0.0, 10.0, 0.001);
        sustain[i].setScrollWheelEnabled(false);
        sustain[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        sustain[i].addListener(this);
        addAndMakeVisible(sustain[i]);

        release[i].setSliderStyle(Slider::SliderStyle::RotaryHorizontalVerticalDrag);
        release[i].setSize(50, 50);
        release[i].setRange(0.0, 10.0, 0.001);
        release[i].setScrollWheelEnabled(false);
        release[i].setTextBoxStyle(Slider::TextBoxBelow, false, 80, 20);
        release[i].addListener(this);
        addAndMakeVisible(release[i]);
    }
}

Wx100AudioProcessorEditor::~Wx100AudioProcessorEditor()
{
}

//==============================================================================
void Wx100AudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::white);

    g.setColour (Colours::black);
    g.setFont (15.0f);
    g.drawFittedText ("Amp", 20, 0, 50, 25, Justification::centred, 1);
    g.drawFittedText ("Tune", 80, 0, 50, 25, Justification::centred, 1);
    g.drawFittedText ("Atk", 140, 0, 50, 25, Justification::centred, 1);
    g.drawFittedText ("Dcy", 200, 0, 50, 25, Justification::centred, 1);
    g.drawFittedText ("Sus", 260, 0, 50, 25, Justification::centred, 1);
    g.drawFittedText ("Rel", 320, 0, 50, 25, Justification::centred, 1);
}

void Wx100AudioProcessorEditor::resized()
{
    for (int i = 0; i < numOperators; ++i) {
        amp[i].setBounds (20, 20 + (60 * i), 20, 20);
        tuning[i].setBounds (80, 20 + (60 * i), 20, 20);
        attack[i].setBounds (140, 20 + (60 * i), 20, 20);
        decay[i].setBounds (200, 20 + (60 * i), 20, 20);
        sustain[i].setBounds (260, 20 + (60 * i), 20, 20);
        release[i].setBounds (320, 20 + (60 * i), 20, 20);
    }
}

void Wx100AudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    for (int i = 0; i < numOperators; ++i) {
        if (slider == &amp[i])
            processor.getFloatParam(AMP_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
        if (slider == &tuning[i])
            processor.getFloatParam(TUNING_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
        if (slider == &attack[i])
            processor.getFloatParam(ATTACK_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
        if (slider == &decay[i])
            processor.getFloatParam(DECAY_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
        if (slider == &sustain[i])
            processor.getFloatParam(SUSTAIN_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
        if (slider == &release[i])
            processor.getFloatParam(RELEASE_1 + i)->updateProcessorAndHostFromUi(slider->getValue());
    }
}
